buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}
plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.3'
    id 'io.spring.dependency-management' version '1.0.13.RELEASE'
    id 'org.asciidoctor.convert' version '1.5.8'
    id 'com.google.cloud.tools.jib' version '3.2.1'
    id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10'
    id 'com.epages.restdocs-api-spec' version '0.16.0'
}

group = 'com.kimyo'
version = '0.0.1'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
}


repositories {
    mavenCentral()
}

// rest-docs
ext {
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
    // web
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // db
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'mysql:mysql-connector-java'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    implementation "com.querydsl:querydsl-apt:${queryDslVersion}"

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Restdocs -> Swagger
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.16.2'

    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // graphQL
    implementation 'org.springframework.boot:spring-boot-starter-graphql'
    testImplementation 'org.springframework.graphql:spring-graphql-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

// RestDocs -> Swagger
openapi3 {
    server = "$System.env.SERVER_NAME"
    title = 'Checkmoi'
    description = 'Checkmoi API 페이지'
    version = project.version.toString().toUpperCase()
    format = 'yaml'
    oauth2SecuritySchemeDefinition = {
        flows = ['authorizationCode']
        tokenUrl = "https://kauth.kakao.com/oauth/token"
        authorizationUrl = "https://kauth.kakao.com/oauth/authorize"
    }
}
task copyDocument(type: Copy) {
    dependsOn("openapi3")
    from file("$buildDir/api-spec/openapi3.yaml")
    into file("src/main/resources/static/docs/.")
}

//queryDSL
def querydslDir = "$buildDir/generated/querydsl"
querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}

sourceSets {
    main.java.srcDir querydslDir
}
compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}
